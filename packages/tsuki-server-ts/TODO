Research:
  ✔ Research the Singleton Pattern @done(19-02-25 22:50)
  ☐ Research the Repository Pattern 
    I've read briefly about this pattern a couple of weeks ago, I should probably try to find the article that I read,
    it was most likely a article about 'Domain Driven Design'. Although that is a whole other topic on it's own, I
    should probably brush up on my knowledge.

Database:
  Need to research the best desgin pattern to desgin a class over the mongoose orm, this 'class' will act as an
  interface, so that it can handle the 'one' and 'only' connection to the database.
    I was thinking about making it a Singleton, but I don't think that will come in handy to use the connection to look
    for different models in the db.
      One idea is to make it an inheritable class so that I can make 'repo' to manage each model in the collection.


Logging:
  ☐ Look into different logging solutions
    Currently off the top of my head, the Winston logger comes to mind. I have never worked with it, but I have seen
    this package's name float around in some articles, and I have seen some codebases that use it.

Architecture:
  I need to look into what is the best practices in splitting up the my Typescript Interfaces & actual application
  domains, e.g. ( User )
  Would also been useful if I look into making this whole thing into a Microservice architecture, that way I can
  implement different parts of the application without worrying about messing with anothing service. An example of
  this would be that I would have an Auth service & a CMS service. This will most likley cause me way more headaches
  than I need right now, but the benefits are worth considering.
  ✔ Clean up the application entry point @done(19-02-25 01:01)
  ✔ Create HTTP (Singleton) class @done(19-02-25 01:02)
    As for the Node.Js HTTP server, will probably make it factory method that returns a server configured with our
    express instance inside of the TsukiServer. Another option I guess would also make it a Singleton since we will only
    have one instance of an http server. I guess, I have no idea if it would a good idea to be able to instantiate
    multiple servers, as I think Express would crash.
      I ended up implementing it as a Singleton Class, and it worked perfectly! For now atleast, I will keep an eye out
      if this causes any other trouble
  ✔ Move all server configuration inside on TsukiServer @done(19-02-25 01:03)
    I am thinking about refactoring the main TsukiServer class, and seperating the node http server as an individual
    interface that TsukiServer configures internally. That way when instantiating a new TsukiServer, it will look
    cleaner as we will only need to optionally supply it with a 'port' number, otherwise it will default to a preset.

API:
  ✔ Implement TsukiAPI @done(19-02-25 22:50)
    The TsukiAPI will be a Singleton class so that there is only one instance of the class in the application.
  ✔ Implement IController Interface @done(19-02-25 01:03)
    Would making it an Abstract Class better? If not why?
  ✔ Implement IRouter Interface @done(19-02-25 22:50)
    Would making it an Abstract Class better? If not why?
      I ended up refactoring, and completely got rid of the Router classes from the application. Now the application
      only uses IControllers, where it handles it's own routing, thus making the flexibility of using custom middleware
      functions. I could have probably found another work around, but this seems more simple and more elegant. I may
      come back to this if I ever come into any problems with the current solution.

Redis:
  Will need to look into the Singleton pattern, I am considering implementing it for the Redis client. That way the
  whole application can use the same Redis client thus eliminating the need to instantiate a new instance.
  ☐ Set up a Redis Client
  ☐ Implement prototype class

Core Auth Functionality:
  ☐ Users can sign up for to the app with a unique email
  ☐ Users cannot sign up for to the app with a duplicate email
  ☐ Users can login to the app with valid email/password
  ☐ Users cannot login to the app with a blank or missing email
  ☐ Users cannot login to the app with a blank or incorrect password
  ☐ There is a resource that can only be seen by logged in users
  ☐ There is a resource that can only be seen by a specific user
  ☐ There is a resource that has some links and content that only appears when logged in /forcertain users
  
  Authentication Security:
    Explore the option of using JWT or Cookie base authentication, I am probably leaning towardsusing JWT,
    for authentication mostly for the fact of already having prior experience in implementing.
    ✔ Password is hashed in the database using a slow-hashing algorithm @critical @done(19-02-0517:38)
    ☐ JWT is parsed with `Authentication` header @high
    ✔ Encryption keys are set in environment variables @critical @done(19-02-05 17:38)

  Authentication:
    ☐ Add auth router 
    ☐ Create user with POST /auth/register
      ☐ validate required fields
      ☐ Check if email is unique
      ☐ hash password with bcrypt
      ☐ insert into db
    ☐ Login user with POST /auth/login
      ☐ check if email in db
      ☐ compare password with hashed password in db
